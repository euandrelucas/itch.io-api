name: ðŸ”§ Testes + Deploy

on:
  push:
    branches:
      - main
      - dev

jobs:
  checks:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do cÃ³digo ðŸ“¥
        uses: actions/checkout@v3

      - name: Instalar Node.js ðŸŸ¢
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Cache de dependÃªncias ðŸ’¾
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Instalar dependÃªncias ðŸ“¦
        run: npm install

      - name: Rodar ESLint âœ¨
        run: npm run lint --if-present

      - name: Rodar testes unitÃ¡rios (Jest)
        run: npm run test -- --passWithNoTests

      - name: Rodar testes E2E
        run: npm run test:e2e

      - name: Verificar vulnerabilidades
        run: npm audit --omit=dev

  deploy-prod:
    runs-on: ubuntu-latest
    needs: checks
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Configurar chave SSH
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.SERVER_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          cat >>~/.ssh/config <<EOF
          Host prod
            HostName ${{ secrets.SERVER_HOST }}
            User ${{ secrets.SERVER_USER }}
            Port ${{ secrets.SERVER_SSH_PORT }}
            IdentityFile ~/.ssh/id_rsa
            ServerAliveInterval 100
            ServerAliveCountMax 3
            TCPKeepAlive yes
            StrictHostKeyChecking no
            UserKnownHostsFile=/dev/null
          EOF

      - name: Deploy em ProduÃ§Ã£o
        run: |
          ssh prod << 'EOF'
            set -e
            cd /${{ secrets.SERVER_USER }}/itch.io-api
            git fetch origin main
            git reset --hard origin/main
            docker compose up -d --build
            docker system prune -af
          EOF